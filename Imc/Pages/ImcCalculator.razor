@page "/imc"
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="logo-background">
        <div class="logo">
        </div>
    </div>

    <EditForm Model="_modelImc" OnValidSubmit="@HandleSubmitAsync">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form">
            <h2>Cálculo de IMC</h2>

            <label for="Altura" class="form-label"></label>
            <InputNumber class="form-input" placeholder="Altura em cm" type="text" id="Altura"
                @bind-Value="_modelImc.Height" />

            <ValidationMessage For="@(() => _modelImc.Height)" />

            <label for="Peso" class="form-label"></label>
            <InputNumber class="form-input" placeholder="Peso" type="text" id="Peso" @bind-Value="_modelImc.Weight" />

            <label for="Sexo" class="form-label"></label>
            <InputText class="form-input" type="text" id="Sexo" @bind-Value="_modelImc.Gender" placeholder="Sexo" />

            <div class="checkbox">
                <input class="checkbox-style" id="checkbox-age" type="checkbox">
                <label for="checkbox-age">Eu tenho 65 anos ou mais</label>
            </div>

            <div class="btn-group">
                <button class="btn btn-primary">Calcular meu IMC</button>
            </div>
        </div>
    </EditForm>

</div>

@code {
    UserData _modelImc = new();
    decimal? imcModel = 0;
    List<ImcResult>? _imcResults;

    protected override async Task OnInitializedAsync()
    {
        string imcResultsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "imcResults");

        if (!string.IsNullOrWhiteSpace(imcResultsJson))
            _imcResults = JsonSerializer.Deserialize<List<ImcResult>>(imcResultsJson);
        else
            _imcResults = new List<ImcResult>();
    }

    async Task HandleSubmitAsync()
    {
        try
        {
            if (!_modelImc.ValidateHeight())
            {
                await JSRuntime.InvokeVoidAsync("alert", "Valor inválido! Certifique-se de que a altura está correta.");
                return;
            }

            var imc = _modelImc.CalculateImc();
            if (imc.HasValue)
            {
                var imcResult = ImcResult.FromImc(imc);

                _imcResults ??= new List<ImcResult>();
                _imcResults.Add(imcResult);

                string imcResultsJson = JsonSerializer.Serialize(_imcResults);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "imcResults", imcResultsJson);
            }

            if (imc >= 25)
                _navigationManager.NavigateTo("/resultado/sobrepeso");

            if (imc >= 18 && imc < 25)
                _navigationManager.NavigateTo("/resultado/ideal");

            if (imc < 18)
                _navigationManager.NavigateTo("/resultado/abaixo");
        }
        catch
        {
            // Handle exceptions
        }
    }
}
